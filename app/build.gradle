// Dummy values
ext.signing = [
        enabled       : false,
        storeFilePath : '.keystore',
        storePassword : 'password',
        keyAlias      : 'alias',
        keyPassword   : 'password',
]

apply plugin: 'com.android.application'
if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

if (System.properties['os.name'].toLowerCase().contains('windows')) {
    ext.ndkBin = 'ndk-build.cmd'
} else {
    ext.ndkBin = 'ndk-build'
}

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.libsdl.openxcom"
        minSdkVersion 10
        targetSdkVersion 22

        ndk {
            moduleName "main"
        }
    }

    if (project.signing.enabled) {
        signingConfigs {
            release {
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = []
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir/$ndkBin", "-C", file('src/main/jni').absolutePath,
                '-j' + Runtime.runtime.availableProcessors(),
                'all'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir/$ndkBin", '-C', file('src/main/jni').absolutePath,
                'clean'
    }

    tasks.withType(Zip) {
        task ->
            task.doLast {
                ant.checksum file: it.archivePath, algorithm: "MD5"
            }
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def getFolder(resource) {
    def binDir = file('src/main/jni/OpenXcom/bin/' + resource);
    return binDir;
}

task packBin(description: 'Update data files.') {
    def index = 0;
    ['common', 'standard', 'UFO', 'TFTD'].each { String res ->
        def zip = task("zip" + res, type: Zip)
        zip.doFirst { println('Packing ' + res + '...') }
        zip.destinationDir = file('src/main/assets')
        zip.archiveName = index.toString() + "_" + res + '.zip'
        zip.from getFolder(res)
        zip.into res
        zip.execute()
        index++;
    }
    def zipTranslations = task("zipTranslations", type: Zip)
    zipTranslations.doFirst { println('Packing translations...' )}
    zipTranslations.destinationDir = file('src/main/assets')
    zipTranslations.archiveName = '7_translations.zip'
    zipTranslations.from getFolder('translations/output')
    //zipTranslations.into 'standard/xcom1/Language'
    zipTranslations.execute()
}

gradle.projectsEvaluated {
    preBuild.dependsOn packBin
}