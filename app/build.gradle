apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.libsdl.openxcom"
        minSdkVersion 10
        targetSdkVersion 22

        ndk {
            moduleName "main"
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = []
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir\\ndk-build.cmd", "-C", file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir\\ndk-build.cmd", '-C', file('src/main/jni').absolutePath,
                'clean'
    }

    task updateData(type: Zip, description: 'Rebuild data file archive') {
        def dataDir = file('src/main/jni/OpenXcom/bin/data').absolutePath;
        from(dataDir)
        destinationDir = file('src/main/assets')
        archiveName = 'data.zip'
    }

    tasks.withType(Zip) {
        task ->
            task.doLast {
                ant.checksum file: it.archivePath, algorithm: "MD5"
            }
    }
    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative, updateData
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}
