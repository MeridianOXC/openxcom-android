import java.util.zip.ZipEntry

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.libsdl.openxcom"
        minSdkVersion 10
        targetSdkVersion 22

        ndk {
            moduleName "main"
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = []
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir\\ndk-build.cmd" , "-C", file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
        commandLine "$ndkDir\\ndk-build.cmd", '-C', file('src/main/jni').absolutePath,
                'clean'
    }

    tasks.withType(Zip) {
        task ->
            task.doLast {
                ant.checksum file: it.archivePath, algorithm: "MD5"
            }
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def getFolder(resource) {
    def binDir = file('src/main/jni/OpenXcom/bin/' + resource);
    return binDir;
}

task packBin() {
    ['common', 'standard', 'UFO', 'TFTD'].each { String res ->
        println 'Packing ' + res + '...'
        def zip = task("zip" + res, type: Zip)
        zip.destinationDir = file('src/main/assets')
        zip.archiveName = res + '.zip'
        zip.from getFolder(res)
        zip.into res
        zip.execute()
    }
}

gradle.projectsEvaluated {
    preBuild.dependsOn packBin
}